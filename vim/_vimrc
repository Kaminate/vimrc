"  __  _  _  _ ___ __    _   _  _ __ __ ___  ___ 
" |  \| || || |_  |__`. | \ / || |  V  | _ \/ _/ 
" | | ' |`._  _/ / |_ | `\ V /'| | \_/ | v / \__ 
" |_|\__|   |_|_/ |__.'   \_/  |_|_| |_|_|_\\__/ 
"
"                  2018-2023

" --------------------------------------------------------------------
"                            Text Editing
" --------------------------------------------------------------------

set encoding=utf-8      " The encoding displayed.
set fileencoding=utf-8  " The encoding written to file.
set wrap                " enable word wrap
set smartindent
set backspace=indent,eol,start " idk man but everyone should have this
set expandtab tabstop=2
set shiftwidth=0
set foldmethod=indent " folding option: group by indentation
set foldignore=       " folding option: ignore comments

" --------------------------------------------------------------------
"                                GUI
" --------------------------------------------------------------------

set path+=**  " add recursive search

" match ErrorMsg '\%>80v.\+'
set ch=3      " Height of command line
set number    "line numbers
set mousehide " Hide the mouse when typing text



if has('gui_running')
  set guioptions-=m  "remove menu bar
  set guioptions-=T  "remove toolbar
  set guioptions-=r  "remove scrollbar
  set guioptions-=L  "remove scrollbar
  if has('gui_win32')
    " better than Inconsolata, liberation mono (this is what sublime uses)
    set guifont=Consolas:h12
    colorscheme molokai
    " au GUIEnter * simalt ~x " maximize on startup
  elseif has('gui_macvim')
    set guifont=Menlo\ Regular:h15
  endif
  set cursorline " highlight line containing cursor

else
  " better colorscheme for vimrc in windows terminal?
  colorscheme dim

  " dont highlight the entire line in red, instead just bold the line number?
  set cursorline
  set cursorlineopt=number
  autocmd ColorScheme * highlight CursorLineNr cterm=bold term=bold gui=bold


endif

set hlsearch " Switch on search pattern highlighting.
syntax on "enable syntax highlighting

set noerrorbells visualbell t_vb=       " disable annoying beeps
autocmd GUIEnter * set visualbell t_vb= " disable annoying boops


set ttimeoutlen=10 " something like duration before executing hotkeys idk
set autoread "auto load file when changed on disk (ie checking out p4)


" --------------------------------------------------------------------
"                              Hotkeys
" --------------------------------------------------------------------

let mapleader = "\<Space>"
nnoremap <Leader>w :w<CR>

" copy from clipboard
vmap <Leader>y "+y

" paste from clipboard
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

" find (case insensitive)
nnoremap <Leader>q :q<CR>
nnoremap <leader>f /\c

if has('gui_running')
  " https://github.com/derekmcloughlin/gvimfullscreen_win32/tree/master
  map <F11> <Esc>:call libcallnr("gvimfullscreen.dll", "ToggleFullScreen", 0)<CR>
endif

" --------------------------------------------------------------------
"                            Auto-completion
" --------------------------------------------------------------------

"Use TAB to complete when typing words, else inserts TABs as usual.
function! Tab_Or_Complete()
  if col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^\w'
    return "\<C-N>"
  else
    return "\<Tab>"
  endif
endfunction
:inoremap <Tab> <C-R>=Tab_Or_Complete()<CR>
:set dictionary="/usr/dict/words"

" show line numbers during :Explore
let g:netrw_bufsettings = 'noma nomod nu nowrap ro nobl'

" ignore annoying ^M carriage returns ( /r/n )
match Ignore /\r$/

" set unknown filetypes to read with c
" set syntax=c
" this should not conflict with reading .vim files..

" stomp over some existing filetypes to read with c instead
" actually dont do this, we have syntax\hlsl.vim and ftdetect\hlsl.vim
" autocmd BufNewFile,BufRead *.hlsl,*.fx set syntax=c

" https://metarl.atlassian.net/wiki/spaces/PROG/pages/2003895912
if $RAD_PROJECT_DIR != ""
  set tags=_local/tags/tags;/ 
  set runtimepath^=$RAD_PROJECT_DIR\scripts\vim
  set runtimepath+=$RAD_PROJECT_DIR\scripts\vim\after 
  " colorscheme rad 

  nnoremap <F4> :call EditRelatedFile()<CR>

  " perforce short cuts
  nnoremap <leader>a :silent !start p4 add %<CR>
endif

" --------------------------------------------------------------------
"                            Backups
" --------------------------------------------------------------------

" Store autogenerated .swp files and backups somewhere other than
" next to their original files
set backup                                     " Keep a backup file
silent !mkdir ~/.vim          > /dev/null 2>&1 " Create backup folder,
silent !mkdir ~/.vim/_backups > /dev/null 2>&1 "   failing silently
silent !mkdir ~/.vim/_swaps   > /dev/null 2>&1 "   if it already exists
set backupdir=~/.vim/_backups                  " Store backups here
set directory=~/.vim/_swaps                    " Store swap files here


" --------------------------------------------------------------------
"                            The End
" --------------------------------------------------------------------

